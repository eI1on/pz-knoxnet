local SCRAP_Terminal = require("SCRAPNetwork/ScrapOS_Terminal")
local TerminalSounds = require("SCRAPNetwork/ScrapOS_TerminalSoundsManager")

local Constants = require("SCRAPNetwork/Games/Constants")
local GamesModule = require("SCRAPNetwork/Games/Module")

local rand = newrandom()

table.insert(GamesModule.GAMES,
    {
        name = "DOOM Eternal",
        description = "First-person shooter. Fight demons, find the exit.",
        activate = function(self) self:activateDoom() end,
        preview = function(self, x, y, width, height, terminal)
            local previewOffsetX = x + 5
            local previewOffsetY = y + 5
            local previewWidth = width - 10
            local previewHeight = height - 10

            terminal:drawRect(
                previewOffsetX, previewOffsetY,
                previewWidth, previewHeight,
                0.7, 0.1, 0, 0
            )

            local titleText = "DOOM"
            local textWidth = getTextManager():MeasureStringX(Constants.UI_CONST.FONT.MEDIUM, titleText)
            terminal:drawText(
                titleText,
                previewOffsetX + (previewWidth - textWidth) / 2,
                previewOffsetY + 5,
                1, 1, 0, 0,
                Constants.UI_CONST.FONT.MEDIUM
            )

            local gunY = previewOffsetY + previewHeight - 20
            terminal:drawRect(
                previewOffsetX + previewWidth / 2 - 10, gunY,
                20, 15,
                1, 0.7, 0.7, 0.7
            )
            terminal:drawRect(
                previewOffsetX + previewWidth / 2 - 5, gunY - 10,
                10, 10,
                1, 0.7, 0.7, 0.7
            )

            local faceSize = 15
            local faceX = previewOffsetX + previewWidth / 3
            local faceY = previewOffsetY + previewHeight / 2
            terminal:drawRect(
                faceX, faceY,
                faceSize, faceSize,
                1, 0.8, 0.2, 0.2
            )

            terminal:drawRect(
                previewOffsetX + previewWidth * 2 / 3, faceY + 10,
                faceSize, faceSize,
                1, 0.8, 0.2, 0.2
            )

            terminal:drawRect(
                previewOffsetX + previewWidth / 2, previewOffsetY + previewHeight / 2 + 5,
                5, 2,
                1, 1, 1, 0
            )
        end
    }
)

local DOOM_CONST = {
    MAP_WIDTH = 16,
    MAP_HEIGHT = 16,

    MOVE_SPEED = 0.05,
    ROTATION_SPEED = 0.03,

    FOV = math.pi / 3,
    NUM_RAYS = 80,

    WEAPONS = {
        PISTOL = { damage = 20, ammo_type = "bullets", rate = 500 },
        SHOTGUN = { damage = 50, ammo_type = "shells", rate = 800 }
    },

    ENEMIES = {
        IMP = { health = 50, damage = 10, speed = 0.03, score = 100 },
        DEMON = { health = 100, damage = 20, speed = 0.02, score = 200 }
    },

    GAME_TICK = 16,
    ENEMY_ATTACK_RANGE = 1.5,

    COLORS = {
        WALL = { r = 0.6, g = 0, b = 0, a = 1 },        -- Red
        FLOOR = { r = 0.3, g = 0.3, b = 0.3, a = 1 },   -- Dark Gray
        CEILING = { r = 0.1, g = 0.1, b = 0.1, a = 1 }, -- Darker Gray
        ENEMY = { r = 0.8, g = 0.2, b = 0.2, a = 1 },   -- Bright Red
        WEAPON = { r = 0.7, g = 0.7, b = 0.7, a = 1 },  -- Gray
        TEXT = { r = 1, g = 0, b = 0, a = 1 },          -- Red
        HUD = { r = 1, g = 1, b = 0, a = 1 }            -- Yellow
    },

    -- (1 = wall, 0 = empty space, 2 = enemy spawn)
    MAP = {
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1 },
        { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 1, 0, 0, 1 },
        { 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
        { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
    }
}

local doomGame = {
    player = {
        x = 2.5,
        y = 2.5,
        angle = 0,
        health = 100,
        ammo = {
            bullets = 50,
            shells = 10
        },
        currentWeapon = "PISTOL"
    },

    enemies = {},
    projectiles = {},

    textures = {},

    isGameOver = false,
    level = 1,
    score = 0,

    stripWidth = 0,
    halfHeight = 0,

    lastUpdateTime = 0,
    lastShootTime = 0,
    animationFrame = 0,
    lastAnimationTime = 0,
    weaponBob = 0,
    weaponBobDir = 1,

    displayWidth = 0,
    displayHeight = 0,
    displayX = 0,
    displayY = 0
}

function GamesModule:activateDoom()
    self.inGame = true

    doomGame.displayWidth = self.terminal.displayWidth
    doomGame.displayHeight = self.terminal.contentAreaHeight
    doomGame.displayX = self.terminal.displayX
    doomGame.displayY = self.terminal.contentAreaY

    doomGame.stripWidth = math.max(1, math.floor(doomGame.displayWidth / DOOM_CONST.NUM_RAYS))
    doomGame.halfHeight = math.floor(doomGame.displayHeight / 2)

    doomGame.player = {
        x = 2.5,
        y = 2.5,
        angle = 0,
        health = 100,
        ammo = {
            bullets = 50,
            shells = 10
        },
        currentWeapon = "PISTOL"
    }

    doomGame.enemies = {}
    for y = 1, DOOM_CONST.MAP_HEIGHT do
        for x = 1, DOOM_CONST.MAP_WIDTH do
            if DOOM_CONST.MAP[y][x] == 2 then
                local enemyType = "IMP"
                if rand:random(1, 3) == 1 then
                    enemyType = "DEMON"
                end

                table.insert(doomGame.enemies, {
                    x = x - 0.5,
                    y = y - 0.5,
                    type = enemyType,
                    health = DOOM_CONST.ENEMIES[enemyType].health,
                    lastMoveTime = 0,
                    state = "idle"
                })
            end
        end
    end

    doomGame.projectiles = {}
    doomGame.isGameOver = false
    doomGame.level = 1
    doomGame.score = 0
    doomGame.lastUpdateTime = getTimeInMillis()
    doomGame.lastShootTime = 0
    doomGame.animationFrame = 0
    doomGame.lastAnimationTime = getTimeInMillis()
    doomGame.weaponBob = 0
    doomGame.weaponBobDir = 1

    TerminalSounds.playUISound("scrap_terminal_key_1")
end

function GamesModule:castRay(angle)
    local rayX = math.cos(angle)
    local rayY = math.sin(angle)
    local distance = 0
    local hitWall = false

    local stepSize = 0.05

    while not hitWall and distance < 20 do
        distance = distance + stepSize

        local testX = math.floor(doomGame.player.x + rayX * distance)
        local testY = math.floor(doomGame.player.y + rayY * distance)

        if testX < 1 or testX > DOOM_CONST.MAP_WIDTH or
            testY < 1 or testY > DOOM_CONST.MAP_HEIGHT then
            hitWall = true
            distance = 20
        else
            if DOOM_CONST.MAP[testY][testX] == 1 then
                hitWall = true
            end
        end
    end

    return distance, hitWall
end

function GamesModule:calculateDistance(x1, y1, x2, y2)
    return math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))
end

function GamesModule:updateDoom()
    local currentTime = getTimeInMillis()
    local deltaTime = (currentTime - doomGame.lastUpdateTime) / 1000

    deltaTime = math.min(deltaTime, 0.1)

    doomGame.weaponBob = doomGame.weaponBob + deltaTime * 2 * doomGame.weaponBobDir
    if doomGame.weaponBob > 1 then
        doomGame.weaponBob = 1
        doomGame.weaponBobDir = -1
    elseif doomGame.weaponBob < 0 then
        doomGame.weaponBob = 0
        doomGame.weaponBobDir = 1
    end

    if currentTime - doomGame.lastAnimationTime > 200 then
        doomGame.animationFrame = (doomGame.animationFrame + 1) % 2
        doomGame.lastAnimationTime = currentTime
    end

    if doomGame.isGameOver then
        return
    end

    local i = 1
    while i <= #doomGame.enemies do
        local enemy = doomGame.enemies[i]

        local dx = doomGame.player.x - enemy.x
        local dy = doomGame.player.y - enemy.y
        local dist = self:calculateDistance(enemy.x, enemy.y, doomGame.player.x, doomGame.player.y)

        if dist < DOOM_CONST.ENEMY_ATTACK_RANGE then
            if currentTime - enemy.lastMoveTime > 1000 then
                enemy.state = "attacking"
                doomGame.player.health = doomGame.player.health - DOOM_CONST.ENEMIES[enemy.type].damage

                TerminalSounds.playUISound("scrap_terminal_key_4")

                enemy.lastMoveTime = currentTime

                if doomGame.player.health <= 0 then
                    doomGame.isGameOver = true
                    doomGame.player.health = 0
                    TerminalSounds.playUISound("scrap_terminal_key_3")
                end
            end
        else
            if dist < 8 then
                local moveSpeed = DOOM_CONST.ENEMIES[enemy.type].speed * deltaTime
                local moveX = dx / dist * moveSpeed
                local moveY = dy / dist * moveSpeed

                local newX = enemy.x + moveX
                local newY = enemy.y + moveY

                if DOOM_CONST.MAP[math.floor(newY) + 1][math.floor(newX) + 1] ~= 1 then
                    enemy.x = newX
                    enemy.y = newY
                end

                enemy.state = "idle"
            end

            i = i + 1
        end
    end
    i = 1
    while i <= #doomGame.projectiles do
        local projectile = doomGame.projectiles[i]

        projectile.x = projectile.x + projectile.dirX * 0.2
        projectile.y = projectile.y + projectile.dirY * 0.2
        projectile.distance = projectile.distance + 0.2

        local removeProjectile = false

        if projectile.distance > 20 then
            removeProjectile = true
        else
            local mapX = math.floor(projectile.x)
            local mapY = math.floor(projectile.y)

            if mapX >= 1 and mapX <= DOOM_CONST.MAP_WIDTH and
                mapY >= 1 and mapY <= DOOM_CONST.MAP_HEIGHT then
                if DOOM_CONST.MAP[mapY][mapX] == 1 then
                    removeProjectile = true
                end
            else
                removeProjectile = true
            end

            local j = 1
            while j <= #doomGame.enemies and not removeProjectile do
                local enemy = doomGame.enemies[j]
                local dist = self:calculateDistance(enemy.x, enemy.y, projectile.x, projectile.y)

                if dist < 0.5 then
                    enemy.health = enemy.health - projectile.damage
                    enemy.state = "hurt"

                    if enemy.health <= 0 then
                        doomGame.score = doomGame.score + DOOM_CONST.ENEMIES[enemy.type].score
                        table.remove(doomGame.enemies, j)

                        TerminalSounds.playUISound("scrap_terminal_key_2")
                    else
                        j = j + 1
                    end

                    removeProjectile = true
                else
                    j = j + 1
                end
            end
        end

        if removeProjectile then
            table.remove(doomGame.projectiles, i)
        else
            i = i + 1
        end
    end

    if #doomGame.enemies == 0 then
        doomGame.level = doomGame.level + 1
        doomGame.isGameOver = true
        TerminalSounds.playUISound("scrap_terminal_key_1")
    end

    doomGame.lastUpdateTime = currentTime
end

function GamesModule:handleDoomKeyPress(key)
    if doomGame.isGameOver then
        if key == Keyboard.KEY_SPACE or key == Keyboard.KEY_BACK then
            self:onActivate()
            return true
        end
        return false
    end

    local moveSpeed = DOOM_CONST.MOVE_SPEED
    local rotateSpeed = DOOM_CONST.ROTATION_SPEED

    if key == Keyboard.KEY_UP then
        local newX = doomGame.player.x + math.cos(doomGame.player.angle) * moveSpeed
        local newY = doomGame.player.y + math.sin(doomGame.player.angle) * moveSpeed

        if DOOM_CONST.MAP[math.floor(newY) + 1][math.floor(newX) + 1] ~= 1 then
            doomGame.player.x = newX
            doomGame.player.y = newY
        end
        return true
    elseif key == Keyboard.KEY_DOWN then
        local newX = doomGame.player.x - math.cos(doomGame.player.angle) * moveSpeed
        local newY = doomGame.player.y - math.sin(doomGame.player.angle) * moveSpeed

        if DOOM_CONST.MAP[math.floor(newY) + 1][math.floor(newX) + 1] ~= 1 then
            doomGame.player.x = newX
            doomGame.player.y = newY
        end
        return true
    elseif key == Keyboard.KEY_LEFT then
        doomGame.player.angle = doomGame.player.angle - rotateSpeed
        return true
    elseif key == Keyboard.KEY_RIGHT then
        doomGame.player.angle = doomGame.player.angle + rotateSpeed
        return true
    elseif key == Keyboard.KEY_SPACE then
        local currentTime = getTimeInMillis()
        local weapon = DOOM_CONST.WEAPONS[doomGame.player.currentWeapon]

        if currentTime - doomGame.lastShootTime > weapon.rate then
            if doomGame.player.ammo[weapon.ammo_type] > 0 then
                doomGame.player.ammo[weapon.ammo_type] = doomGame.player.ammo[weapon.ammo_type] - 1

                table.insert(doomGame.projectiles, {
                    x = doomGame.player.x,
                    y = doomGame.player.y,
                    dirX = math.cos(doomGame.player.angle),
                    dirY = math.sin(doomGame.player.angle),
                    damage = weapon.damage,
                    distance = 0
                })

                doomGame.lastShootTime = currentTime
                TerminalSounds.playUISound("scrap_terminal_key_1")
            else
                TerminalSounds.playUISound("scrap_terminal_key_4")
            end
        end
        return true
    elseif key == Keyboard.KEY_BACK then
        self:onActivate()
        return true
    end

    return false
end

function GamesModule:renderDoom()
    self.terminal:renderTitle("DOOM - HEALTH: " .. doomGame.player.health .. " | SCORE: " .. doomGame.score)

    self.terminal:drawRect(
        doomGame.displayX,
        doomGame.displayY,
        doomGame.displayWidth,
        doomGame.halfHeight,
        DOOM_CONST.COLORS.CEILING.a,
        DOOM_CONST.COLORS.CEILING.r,
        DOOM_CONST.COLORS.CEILING.g,
        DOOM_CONST.COLORS.CEILING.b
    )

    self.terminal:drawRect(
        doomGame.displayX,
        doomGame.displayY + doomGame.halfHeight,
        doomGame.displayWidth,
        doomGame.halfHeight,
        DOOM_CONST.COLORS.FLOOR.a,
        DOOM_CONST.COLORS.FLOOR.r,
        DOOM_CONST.COLORS.FLOOR.g,
        DOOM_CONST.COLORS.FLOOR.b
    )

    for i = 0, DOOM_CONST.NUM_RAYS - 1 do
        local rayAngle = doomGame.player.angle - (DOOM_CONST.FOV / 2) + (DOOM_CONST.FOV * i / DOOM_CONST.NUM_RAYS)

        local distance, hitWall = self:castRay(rayAngle)

        local correctedDistance = distance * math.cos(rayAngle - doomGame.player.angle)

        local wallHeight = math.min(doomGame.displayHeight, math.floor(doomGame.displayHeight / correctedDistance))

        local wallTop = doomGame.displayY + (doomGame.displayHeight - wallHeight) / 2

        local brightness = math.max(0.2, 1.0 - correctedDistance / 10)

        self.terminal:drawRect(
            doomGame.displayX + i * doomGame.stripWidth,
            wallTop,
            doomGame.stripWidth,
            wallHeight,
            1,
            DOOM_CONST.COLORS.WALL.r * brightness,
            DOOM_CONST.COLORS.WALL.g * brightness,
            DOOM_CONST.COLORS.WALL.b * brightness
        )
    end

    for _, enemy in ipairs(doomGame.enemies) do
        local dx = enemy.x - doomGame.player.x
        local dy = enemy.y - doomGame.player.y
        local dist = math.sqrt(dx * dx + dy * dy)

        local enemyAngle = math.atan2(dy, dx)

        while enemyAngle < doomGame.player.angle - math.pi do
            enemyAngle = enemyAngle + 2 * math.pi
        end
        while enemyAngle > doomGame.player.angle + math.pi do
            enemyAngle = enemyAngle - 2 * math.pi
        end

        local inFOV = math.abs(enemyAngle - doomGame.player.angle) < DOOM_CONST.FOV / 1.5

        if inFOV and dist > 0.5 and dist < 15 then
            local screenX = doomGame.displayX + doomGame.displayWidth / 2 +
                (enemyAngle - doomGame.player.angle) / DOOM_CONST.FOV * doomGame.displayWidth

            local size = math.min(100, math.floor(300 / dist))

            if screenX + size / 2 >= doomGame.displayX and
                screenX - size / 2 <= doomGame.displayX + doomGame.displayWidth then
                local screenY = doomGame.displayY + doomGame.displayHeight / 2 + size / 8

                local r, g, b = DOOM_CONST.COLORS.ENEMY.r, DOOM_CONST.COLORS.ENEMY.g, DOOM_CONST.COLORS.ENEMY.b

                if enemy.state == "hurt" then
                    if doomGame.animationFrame == 0 then
                        r, g, b = 1, 1, 1
                    end
                elseif enemy.state == "attacking" then
                    r, g, b = 1, 0, 0
                end

                self.terminal:drawRect(
                    screenX - size / 2,
                    screenY - size,
                    size,
                    size,
                    1, r, g, b
                )

                if enemy.type == "DEMON" then
                    self.terminal:drawRect(
                        screenX - size / 2 - size / 8,
                        screenY - size - size / 4,
                        size / 6,
                        size / 3,
                        1, r, g, b
                    )
                    self.terminal:drawRect(
                        screenX + size / 2,
                        screenY - size - size / 4,
                        size / 6,
                        size / 3,
                        1, r, g, b
                    )
                end

                local eyeSize = size / 6
                self.terminal:drawRect(
                    screenX - size / 4,
                    screenY - size + size / 3,
                    eyeSize,
                    eyeSize,
                    1, 1, 1, 0
                )
                self.terminal:drawRect(
                    screenX + size / 4 - eyeSize,
                    screenY - size + size / 3,
                    eyeSize,
                    eyeSize,
                    1, 1, 1, 0
                )
            end
        end
    end

    local weaponWidth = doomGame.displayWidth / 3
    local weaponHeight = doomGame.displayHeight / 4

    local bobOffset = doomGame.weaponBob * 5

    self.terminal:drawRect(
        doomGame.displayX + doomGame.displayWidth / 2 - weaponWidth / 2,
        doomGame.displayY + doomGame.displayHeight - weaponHeight + bobOffset,
        weaponWidth,
        weaponHeight / 2,
        1,
        DOOM_CONST.COLORS.WEAPON.r,
        DOOM_CONST.COLORS.WEAPON.g,
        DOOM_CONST.COLORS.WEAPON.b
    )

    self.terminal:drawRect(
        doomGame.displayX + doomGame.displayWidth / 2 - weaponWidth / 6,
        doomGame.displayY + doomGame.displayHeight - weaponHeight - weaponHeight / 4 + bobOffset,
        weaponWidth / 3,
        weaponHeight / 2,
        1,
        DOOM_CONST.COLORS.WEAPON.r,
        DOOM_CONST.COLORS.WEAPON.g,
        DOOM_CONST.COLORS.WEAPON.b
    )

    if getTimeInMillis() - doomGame.lastShootTime < 100 then
        local flashSize = weaponWidth / 4
        self.terminal:drawRect(
            doomGame.displayX + doomGame.displayWidth / 2 - flashSize / 2,
            doomGame.displayY + doomGame.displayHeight - weaponHeight - weaponHeight / 3 - flashSize / 2 + bobOffset,
            flashSize,
            flashSize,
            1, 1, 1, 0
        )
    end

    local hudY = doomGame.displayY + doomGame.displayHeight - 25

    local healthText = "HEALTH: " .. doomGame.player.health
    self.terminal:drawText(
        healthText,
        doomGame.displayX + 10,
        hudY,
        DOOM_CONST.COLORS.TEXT.a,
        DOOM_CONST.COLORS.TEXT.r,
        DOOM_CONST.COLORS.TEXT.g,
        DOOM_CONST.COLORS.TEXT.b,
        Constants.UI_CONST.FONT.CODE
    )

    local ammoText = "AMMO: " .. doomGame.player.ammo[DOOM_CONST.WEAPONS[doomGame.player.currentWeapon].ammo_type]
    local ammoWidth = getTextManager():MeasureStringX(Constants.UI_CONST.FONT.CODE, ammoText)
    self.terminal:drawText(
        ammoText,
        doomGame.displayX + doomGame.displayWidth - ammoWidth - 10,
        hudY,
        DOOM_CONST.COLORS.HUD.a,
        DOOM_CONST.COLORS.HUD.r,
        DOOM_CONST.COLORS.HUD.g,
        DOOM_CONST.COLORS.HUD.b,
        Constants.UI_CONST.FONT.CODE
    )

    if doomGame.isGameOver then
        local gameOverText
        local textColor

        if doomGame.player.health <= 0 then
            gameOverText = "GAME OVER"
            textColor = DOOM_CONST.COLORS.TEXT
        else
            gameOverText = "LEVEL COMPLETE!"
            textColor = DOOM_CONST.COLORS.HUD
        end

        local textWidth = getTextManager():MeasureStringX(Constants.UI_CONST.FONT.LARGE, gameOverText)
        local textX = doomGame.displayX + (doomGame.displayWidth - textWidth) / 2
        local textY = doomGame.displayY + doomGame.displayHeight / 3

        self.terminal:drawRect(
            textX - 20, textY - 20,
            textWidth + 40, 60,
            0.8, 0, 0, 0
        )

        self.terminal:drawText(
            gameOverText, textX, textY,
            textColor.a, textColor.r, textColor.g, textColor.b,
            Constants.UI_CONST.FONT.LARGE
        )

        local scoreText = "FINAL SCORE: " .. doomGame.score
        local scoreWidth = getTextManager():MeasureStringX(Constants.UI_CONST.FONT.MEDIUM, scoreText)
        local scoreX = doomGame.displayX + (doomGame.displayWidth - scoreWidth) / 2

        self.terminal:drawText(
            scoreText, scoreX, textY + 40,
            textColor.a, textColor.r, textColor.g, textColor.b,
            Constants.UI_CONST.FONT.MEDIUM
        )

        self.terminal:renderFooter(gameOverText .. "! | PRESS SPACE OR BACKSPACE TO CONTINUE")
    else
        self.terminal:renderFooter("ARROWS - MOVE | SPACE - SHOOT | BACKSPACE - QUIT")
    end
end
